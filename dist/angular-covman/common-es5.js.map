{"version":3,"sources":["webpack:///src/app/common/services/toast.service.ts","webpack:///src/app/common/services/user-data.service.ts"],"names":["ToastService","messageService","severity","summary","detail","add","messages","addAll","clear","providedIn","UserDataService","httpClient","corsHeaders","parent","post","parents","headers","pipe","response","handleError","email","password","url","users","get","error"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAMA;;;;;;UAIaA,Y;AACT,8BAAoBC,cAApB,EAAoD;AAAA;;AAAhC,eAAAA,cAAA,GAAAA,cAAA;AAAmC;AAEvD;;;;;;;;;;oCAMUC,Q,EAAkBC,O,EAAiBC,M,EAAgB;AACzD,iBAAKH,cAAL,CAAoBI,GAApB,CAAwB;AAAEH,sBAAQ,EAAEA,QAAZ;AAAsBC,qBAAO,EAAEA,OAA/B;AAAwCC,oBAAM,EAAEA;AAAhD,aAAxB;AACH;AAED;;;;;;;;sCAKYE,Q,EAAe;AACvB,iBAAKL,cAAL,CAAoBM,MAApB,CAA2BD,QAA3B;AACH;AAED;;;;;;kCAGQ;AACJ,iBAAKL,cAAL,CAAoBO,KAApB;AACH;;;;;;;yBA3BQR,Y,EAAY,kH;AAAA,O;;;eAAZA,Y;AAAY,iBAAZA,YAAY,K;AAAA,oBANT;;;;;wEAMHA,Y,EAAY;gBAPxB,wDAOwB;iBAPb;AACRS,sBAAU,EAAE;AADJ,W;AAOa,U;;;;;;;;;;;;;;;;;;;;;;ACVzB;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;UAUaC,e;AAET,iCAAoBC,UAApB,EAA4C;AAAA;;AAAxB,eAAAA,UAAA,GAAAA,UAAA;AAGX,eAAAC,WAAA,GAAc,IAAI,gEAAJ,CAAgB;AACrC,4BAAgB,kBADqB;AAErC,sBAAU,kBAF2B;AAGrC,2CAA+B;AAHM,WAAhB,CAAd;AAFR;AAQD;;;;;;;;oCAIiBC,M,EAAgB;AAC/B,mBAAO,KAAKF,UAAL,CAAgBG,IAAhB,CAA6B,sEAAYC,OAAzC,EAAkDF,MAAlD,EAA0D;AAC/DG,qBAAO,EAAE,KAAKJ;AADiD,aAA1D,EAGJK,IAHI,CAIH,2DAAI,UAAAC,QAAQ,EAAI;AAAC,qBAAOA,QAAP;AAAgB,aAAjC,CAJG,EAKH,kEAAW,KAAKC,WAAhB,CALG,CAAP;AAOD;AAED;;;;;;;;;kCAMeC,K,EAAeC,Q,EAAkB;AAC9C,gBAAIC,GAAG,GAAG,sEAAYC,KAAZ,GAAoB,GAApB,GAA0BH,KAA1B,GAAkC,GAAlC,GAAwCC,QAAlD;AACA,mBAAO,KAAKV,UAAL,CAAgBa,GAAhB,CAAoBF,GAApB,EAAyB;AAC9BN,qBAAO,EAAE,KAAKJ;AADgB,aAAzB,EAGNK,IAHM,CAIL,2DAAI,UAAAC,QAAQ,EAAI;AAAC,qBAAOA,QAAP;AAAgB,aAAjC,CAJK,EAKL,kEAAW,KAAKC,WAAhB,CALK,CAAP;AAOD;AAED;;;;;;;sCAImBM,K,EAA0B;AAC3C,mBAAO,wDAAWA,KAAX,CAAP;AACD;;;;;;;yBAhDQf,e,EAAe,uH;AAAA,O;;;eAAfA,e;AAAe,iBAAfA,eAAe,K;AAAA,oBAFZ;;;;;wEAEHA,e,EAAe;gBAH3B,wDAG2B;iBAHhB;AACRD,sBAAU,EAAE;AADJ,W;AAGgB,U","file":"common-es5.js","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { MessageService } from 'primeng/api';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\n/**\r\n * Toast service class\r\n * This class provides methods to add single, multiple alerts as a toast \r\n */\r\nexport class ToastService {\r\n    constructor(private messageService: MessageService) { }\r\n\r\n    /**\r\n     * add single toast message\r\n     * @param severity Severity level of the message, valid values are \"success\", \"info\", \"warn\" and \"error\"\r\n     * @param summary Summary text of the message.\r\n     * @param detail Detail text of the message.\r\n     */\r\n    addSingle(severity: string, summary: string, detail: string) {\r\n        this.messageService.add({ severity: severity, summary: summary, detail: detail });\r\n    }\r\n\r\n    /**\r\n     * add multiple toast messages\r\n     * @param messages \r\n     * array of message type {severity:'success', summary:'Service Message', detail:'Via MessageService'}\r\n     */\r\n    addMultiple(messages: any) {\r\n        this.messageService.addAll(messages);\r\n    }\r\n\r\n    /**\r\n     * clear all toast messages\r\n     */\r\n    clear() {\r\n        this.messageService.clear();\r\n    }\r\n}","import { Injectable } from '@angular/core';\r\nimport {HttpClient, HttpErrorResponse, HttpHeaders} from '@angular/common/http';\r\nimport {Observable, throwError} from 'rxjs';\r\nimport { Parent } from './../models/parent.model';\r\nimport { environment } from './../../../environments/environment';\r\nimport { map, catchError } from 'rxjs/operators';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class UserDataService {\r\n\r\n    constructor(private httpClient: HttpClient) {\r\n    }\r\n\r\n    readonly corsHeaders = new HttpHeaders({\r\n      'Content-Type': 'application/json',\r\n      'Accept': 'application/json',\r\n      'Access-Control-Allow-Origin': '*'\r\n    });\r\n\r\n    /**\r\n     * Add a new parent user from UI\r\n     * @param parent \r\n     */\r\n    public addParent(parent: Parent) : Observable<Parent> {\r\n      return this.httpClient.post<Parent>(environment.parents, parent, {\r\n        headers: this.corsHeaders\r\n      })\r\n        .pipe(\r\n          map(response => {return response}),\r\n          catchError(this.handleError)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Get user from the backend\r\n     * \r\n     * @param email \r\n     * @param password \r\n     */\r\n    public getUser(email: string, password: string) {\r\n      let url = environment.users + \"/\" + email + \"/\" + password;\r\n      return this.httpClient.get(url, {\r\n        headers: this.corsHeaders\r\n      })\r\n      .pipe(\r\n        map(response => {return response}),\r\n        catchError(this.handleError)\r\n      );\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param error Handle error from backend\r\n     */\r\n    public handleError(error: HttpErrorResponse) {\r\n      return throwError(error);\r\n    }\r\n}\r\n"]}