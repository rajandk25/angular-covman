{"version":3,"sources":["./src/app/common/services/toast.service.ts","./src/app/common/services/user-data.service.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAA2C;AACE;;;AAK7C;;;GAGG;AACI,MAAM,YAAY;IACrB,YAAoB,cAA8B;QAA9B,mBAAc,GAAd,cAAc,CAAgB;IAAI,CAAC;IAEvD;;;;;OAKG;IACH,SAAS,CAAC,QAAgB,EAAE,OAAe,EAAE,MAAc;QACvD,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,EAAE,QAAQ,EAAE,QAAQ,EAAE,OAAO,EAAE,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,CAAC,CAAC;IACtF,CAAC;IAED;;;;OAIG;IACH,WAAW,CAAC,QAAa;QACrB,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;IACzC,CAAC;IAED;;OAEG;IACH,KAAK;QACD,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,CAAC;IAChC,CAAC;;wEA3BQ,YAAY;+FAAZ,YAAY,WAAZ,YAAY,mBANT,MAAM;6FAMT,YAAY;cAPxB,wDAAU;eAAC;gBACR,UAAU,EAAE,MAAM;aACrB;;;;;;;;;;;;;;ACLD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA2C;AACqC;AACpC;AAEsB;AACjB;;;AAK1C,MAAM,eAAe;IAExB,YAAoB,UAAsB;QAAtB,eAAU,GAAV,UAAU,CAAY;QAGjC,gBAAW,GAAG,IAAI,gEAAW,CAAC;YACrC,cAAc,EAAE,kBAAkB;YAClC,QAAQ,EAAE,kBAAkB;YAC5B,6BAA6B,EAAE,GAAG;SACnC,CAAC,CAAC;IANH,CAAC;IAQD;;;OAGG;IACI,SAAS,CAAC,MAAc;QAC7B,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAS,qEAAW,CAAC,OAAO,EAAE,MAAM,EAAE;YAC/D,OAAO,EAAE,IAAI,CAAC,WAAW;SAC1B,CAAC;aACC,IAAI,CACH,0DAAG,CAAC,QAAQ,CAAC,EAAE,GAAE,OAAO,QAAQ,GAAC,CAAC,EAClC,iEAAU,CAAC,IAAI,CAAC,WAAW,CAAC,CAC7B,CAAC;IACN,CAAC;IAED;;;;;OAKG;IACI,OAAO,CAAC,KAAa,EAAE,QAAgB;QAC5C,IAAI,GAAG,GAAG,qEAAW,CAAC,KAAK,GAAG,GAAG,GAAG,KAAK,GAAG,GAAG,GAAG,QAAQ,CAAC;QAC3D,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,GAAG,EAAE;YAC9B,OAAO,EAAE,IAAI,CAAC,WAAW;SAC1B,CAAC;aACD,IAAI,CACH,0DAAG,CAAC,QAAQ,CAAC,EAAE,GAAE,OAAO,QAAQ,GAAC,CAAC,EAClC,iEAAU,CAAC,IAAI,CAAC,WAAW,CAAC,CAC7B,CAAC;IACJ,CAAC;IAED;;;OAGG;IACI,WAAW,CAAC,KAAwB;QACzC,OAAO,uDAAU,CAAC,KAAK,CAAC,CAAC;IAC3B,CAAC;;8EAhDQ,eAAe;kGAAf,eAAe,WAAf,eAAe,mBAFZ,MAAM;6FAET,eAAe;cAH3B,wDAAU;eAAC;gBACR,UAAU,EAAE,MAAM;aACrB","file":"common-es2015.js","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { MessageService } from 'primeng/api';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\n/**\r\n * Toast service class\r\n * This class provides methods to add single, multiple alerts as a toast \r\n */\r\nexport class ToastService {\r\n    constructor(private messageService: MessageService) { }\r\n\r\n    /**\r\n     * add single toast message\r\n     * @param severity Severity level of the message, valid values are \"success\", \"info\", \"warn\" and \"error\"\r\n     * @param summary Summary text of the message.\r\n     * @param detail Detail text of the message.\r\n     */\r\n    addSingle(severity: string, summary: string, detail: string) {\r\n        this.messageService.add({ severity: severity, summary: summary, detail: detail });\r\n    }\r\n\r\n    /**\r\n     * add multiple toast messages\r\n     * @param messages \r\n     * array of message type {severity:'success', summary:'Service Message', detail:'Via MessageService'}\r\n     */\r\n    addMultiple(messages: any) {\r\n        this.messageService.addAll(messages);\r\n    }\r\n\r\n    /**\r\n     * clear all toast messages\r\n     */\r\n    clear() {\r\n        this.messageService.clear();\r\n    }\r\n}","import { Injectable } from '@angular/core';\r\nimport {HttpClient, HttpErrorResponse, HttpHeaders} from '@angular/common/http';\r\nimport {Observable, throwError} from 'rxjs';\r\nimport { Parent } from './../models/parent.model';\r\nimport { environment } from './../../../environments/environment';\r\nimport { map, catchError } from 'rxjs/operators';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class UserDataService {\r\n\r\n    constructor(private httpClient: HttpClient) {\r\n    }\r\n\r\n    readonly corsHeaders = new HttpHeaders({\r\n      'Content-Type': 'application/json',\r\n      'Accept': 'application/json',\r\n      'Access-Control-Allow-Origin': '*'\r\n    });\r\n\r\n    /**\r\n     * Add a new parent user from UI\r\n     * @param parent \r\n     */\r\n    public addParent(parent: Parent) : Observable<Parent> {\r\n      return this.httpClient.post<Parent>(environment.parents, parent, {\r\n        headers: this.corsHeaders\r\n      })\r\n        .pipe(\r\n          map(response => {return response}),\r\n          catchError(this.handleError)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Get user from the backend\r\n     * \r\n     * @param email \r\n     * @param password \r\n     */\r\n    public getUser(email: string, password: string) {\r\n      let url = environment.users + \"/\" + email + \"/\" + password;\r\n      return this.httpClient.get(url, {\r\n        headers: this.corsHeaders\r\n      })\r\n      .pipe(\r\n        map(response => {return response}),\r\n        catchError(this.handleError)\r\n      );\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param error Handle error from backend\r\n     */\r\n    public handleError(error: HttpErrorResponse) {\r\n      return throwError(error);\r\n    }\r\n}\r\n"],"sourceRoot":"webpack:///"}